class Pokemon:
  #Базовый класс для всех покемонов

  def __init__(self, name):
    #Инициализирует имя покемона
    self.name = name

  def speak(self):
    #Возвращает строку с описанием звука, который издает покемон
    return "Звук покемона"


# Производный класс
class Vaporeon(Pokemon):
  #Производный класс для Вапореона

  def speak(self):
    #Возвращает строку с описанием звука, который издает Вапореон
    return "*журчание воды*"


# Производный класс
class Pikachu(Pokemon):
  #Производный класс для Пикачу

  def speak(self):
    #Возвращает строку с описанием звука, который издает Пикачу
    return "Пи-ка-чу!"


# Тестовая программа
if __name__ == "__main__":
  # Создание объекта базового класса
  pokemon = Pokemon("Покемон")
  print(f"{pokemon.name}: {pokemon.speak()}")

  # Создание объекта производного класса Vaporeon
  vaporeon = Vaporeon("Вапореон")
  print(f"{vaporeon.name}: {vaporeon.speak()}")

  # Создание объекта производного класса Pikachu
  pikachu = Pikachu("Пикачу")
  print(f"{pikachu.name}: {pikachu.speak()}")
'''
Полиморфизм: Метод speak() реализован в базовом(PO) и производных классах(PI, VA), но поведение его отличается в зависимости от типа объекта.

Наследование: Классы Pikachu и Vaporeon наследуют свойства и методы от класса Pokemon.

Переопределение: Метод speak() переопределен в производных классах, чтобы обеспечить специфическое поведение для каждого покемона.
'''
